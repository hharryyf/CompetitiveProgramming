I did this practice with Edward. I'm a bit angry with our performance, if I had implemented problem E 
instead of supervising Edward to do the implementation, we would have solved 5 problems instead of 4.
We finished the first 4 problems in only 26 minutes, however, we didn't coded a single question in 1.5h.
I lost all trust in someone's implementation skill after this practice ANGRY!!!
Contest link:
https://codeforces.com/contest/1701

A. Grass Field [solved by Edward] (diff=?, login)

B. Permutation [solved by me] (diff=?,login)
Just let d = 2, and greedily construct.

C. Schedule Management [solved by Edward] (diff=?, binary search on final answer, greedy)
We must realize each task is only specialized by 1 person. We can binary search on the task completion time T.
To validate, we use the greedy strategy, let each individual complete as many as specialized task as possible,
to ensure this individual does not exceed the overall T. 

D. Permutation Restoration [solved by me] (diff=?, greedy, ad-hoc)
Firstly, we can find for each position what's the range of number can fit. Once we get this range, we can 
transform the problem into the following, despite we need to print out the reverse Permutation.
Give 1 to n, each number must sit in position [L[i], R[i]], output a suitable permutation. Note that the 
technique was covered in CF1348F, just use line sweep and always pick the number with the smallest right bound.

E. Text Editor [fail in contest, solved afterward by me] (diff=?, greedy, dp)
In the contest I have the following observation (I have to stress that everything!!!):
(1) For an optimal strategy, we always remove a suffix by the backspace/move back operation, then jump to the 
front, and remove some prefix by the forward + backspace operation. Note that one special case we need to consider
is the operation only contains remove suffix by backspace/move backward operation.
(2) For suffix operation, we only care the leftmost removal position to be as large as possible, and the cost 
is N + 1 - i.
(3) For the prefix operation, we only care about the rightmost removal position to be as small as possible, and 
suppose we want to match prefix i with the first j character of string j, the removal cost is:
i - j + r (here r is the last position of removal).
(4) For (2) we can maintain an array suf[i][j] means the largest leftmost removal position such that 
the s[i:] matches t[j:], we can define a similar pre[i][j] for prefix.
(5) Note that the dp transition is simple, the only important case is pre[i][j]/suf[i][j] is valid iff the s[1:i], t[1:j] (resp. s[i:], t[j:])
can match. 
<-- Although everything above is correct, we failed to solve the question in contest even if I AC in 1 go after the contest.
The most stupid dicision for me is to ask Edward implement this question, because I thought he's more experienced in dp which might 
be true before 2021 but not now. He messed up with the base cases, and we failed to pass the sample test case for an hour :(. 
If I had implemented the question, we would surely have solved this problem.  

F. Points [fail] (diff=?, data structure, matrices)
This is a very difficult question. We should easily understand that if c(i) be the total number of points k on the right of index i such that 
i + d <= k. Then, the answer to each query is just sum(c(i) * (c(i) - 1) / 2, i = 1..200000) (here we use 1 <= a[i] <= 200000).
We need to think how this value can be maintained.
Note that c(i) * (c(i) - 1) = c(i) ^ 2 - c(i). Suppose we update c(i) to c(i) + 1. The change of value is the change
from (1, x, x^2) --> (1, x+1, (x+1)^2). There's a matrix associated with this operation. 
Similarly, there's a matrix that transforms (1, x+1, (x+1)^2) --> (1, x, x^2) which is just the inverse of the previous matrix.
Hence, we can understand the update as range multiplication of a matrix. However, there's one more bit. What if a point c(i) does not actually exist,
its c(i) should not be added. This can be handled by point update. A point's value exists if and only if the point itself exists, otherwise,
the point's c(i) value would be 0. 